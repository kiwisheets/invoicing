input InvoiceInput {
  clientID: ID!
  items: [LineItemInput!]!
}

input PreviewInvoiceInput {
  number: Int!
  clientID: ID!
  items: [LineItemInput!]!
}

input LineItemInput {
  name: String!
  description: String!
  unitCost: Float!
  taxRate: Float
  quantity: Float!
  taxInclusive: Boolean # uses company setting if unspecified
}

type Invoice {
  id: ID!
  number: Int!
  createdBy: User!
  client: Client!
  items: [LineItem!]! @goField(forceResolver: true)
}

type LineItem {
  name: String!
  description: String!
  unitCost: Float!
  taxRate: Float
  quantity: Float!
  taxInclusive: Boolean!
}

extend type Client @key(fields: "id") {
  id: ID! @external
  invoices: [Invoice!]
}

extend type User @key(fields: "id") {
  id: ID! @external
}

extend type Company @key(fields: "id") {
  id: ID! @external
  invoiceTaxInclusive: Boolean!
}

extend type Query {
  invoice(id: ID!): Invoice! @hasPerm(perm: "Invoice:Read")
  invoices(page: Int): [Invoice!]! @hasPerm(perm: "Invoice:Read")

  previewInvoice(invoice: PreviewInvoiceInput!): String! @hasPerm(perm: "Invoice:Read")
}

extend type Mutation {
  createInvoice(invoice: InvoiceInput!): Invoice! @hasPerm(perm: "Invoice:Create")

  updateInvoice(invoice: InvoiceInput!): Invoice! @hasPerm(perm: "Invoice:Update")

  createInvoicePdf(id: ID!): String! @hasPerm(perm: "Invoice:Read")

  updateCompanyTaxInclusive(invoiceTaxInclusive: Boolean!): Company! @hasPerm(perm: "Company:Write")
}
